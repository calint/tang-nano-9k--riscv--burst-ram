
RAM:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <_start>:
# .global _start
# 
# _start:
# 	addi x0, x0, 0			# nop
   0:	00000013          	addi	x0,x0,0
# 	lui x10, 0x12345		# x10 = 0x1234_5678
   4:	12345537          	lui	x10,0x12345
# 	addi x10, x10, 0x678
   8:	67850513          	addi	x10,x10,1656 # 12345678 <__global_pointer$+0x12343a38>
# 	addi x11, x0, 3			# x11 = 3
   c:	00300593          	addi	x11,x0,3
# 	slti x12, x11, 4		# x12 = 1
  10:	0045a613          	slti	x12,x11,4
# 	slti x12, x11, -1		# x12 = 0
  14:	fff5a613          	slti	x12,x11,-1
# 	sltiu x12, x11, 4		# x12 = 1
  18:	0045b613          	sltiu	x12,x11,4
# 	sltiu x12, x11, -1		# x12 = 1
  1c:	fff5b613          	sltiu	x12,x11,-1
# 	xori x13, x12, -1		# x13 = 0xffff_fffe
  20:	fff64693          	xori	x13,x12,-1
# 	ori x13, x13, 1			# x13 = 0xffff_ffff
  24:	0016e693          	ori	x13,x13,1
# 	andi x13, x13, 2		# x13 = 2
  28:	0026f693          	andi	x13,x13,2
# 	slli x13, x13, 3		# x13 = 16
  2c:	00369693          	slli	x13,x13,0x3
# 	srli x13, x13, 3		# x13 = 2
  30:	0036d693          	srli	x13,x13,0x3
# 	xori x13, x13, -1       # x13 = 0xffff_fffd == -3
  34:	fff6c693          	xori	x13,x13,-1
# 	srai x13, x13, 1		# x13 = 0xffff_fffe == -2
  38:	4016d693          	srai	x13,x13,0x1
# 	add x14, x13, x12		# x14 = -2 + 1 == -1
  3c:	00c68733          	add	x14,x13,x12
# 	sub x14, x14, x12		# x14 = -1 - 1 == -2
  40:	40c70733          	sub	x14,x14,x12
# 	sll x15, x12, x12		# x15 = 1 << 1 == 2
  44:	00c617b3          	sll	x15,x12,x12
# 	slt x16, x12, x15		# x16 = 1 (1 < 2)
  48:	00f62833          	slt	x16,x12,x15
# 	slt x16, x12, x12		# x16 = 0 (1 < 1)
  4c:	00c62833          	slt	x16,x12,x12
# 	sltu x16, x16, x13		# x16 = 1 (0 < 0xfff_ffe)
  50:	00d83833          	sltu	x16,x16,x13
# 	xor x17, x16, x13		# x17 = -1 (1 ^ 0xffff_fffe)
  54:	00d848b3          	xor	x17,x16,x13
# 	srl x18, x11, x16		# x18 = 3 >> 1 == 1
  58:	0105d933          	srl	x18,x11,x16
# 	sra x18, x17, x16		# x18 = 0xffff_fffe >>> 1 == -1
  5c:	4108d933          	sra	x18,x17,x16
# 	or x19, x16, x11		# x19 = 1 | 3 == 3
  60:	00b869b3          	or	x19,x16,x11
# 	and x19, x19, x16		# x19 = 3 & 1 == 1
  64:	0109f9b3          	and	x19,x19,x16
# 	lui x20, 0x1			# x20 = 0x0000_1000
  68:	00001a37          	lui	x20,0x1
# 	sw x19, 4(x20)			# ram[0x1000 + 4] == 0x0000_0001
  6c:	013a2223          	sw	x19,4(x20) # 1004 <lbl_auipc+0xbcc>
# 	sh x19, 6(x20)			# ram[0x1000 + 6] == 0x0001
  70:	013a1323          	sh	x19,6(x20)
# 	sb x19, 7(x20)			# ram[0x1000 + 7] == 0x01
  74:	013a03a3          	sb	x19,7(x20)
# 	lb x21, 4(x20)			# x21 = ram[0x1000 + 4] == 0x01
  78:	004a0a83          	lb	x21,4(x20)
# 	lh x21, 6(x20)			# x21 = ram[0x1000 + 6] == 0x0101
  7c:	006a1a83          	lh	x21,6(x20)
# 	lw x21, 4(x20)			# x21 = ram[0x1000 + 4] == 0x0101_0001
  80:	004a2a83          	lw	x21,4(x20)
# 	sw x17, 0(x20)			# ram[0x1000] = 0xffff_ffff
  84:	011a2023          	sw	x17,0(x20)
# 	lbu x21, 0(x20)			# x21 = ram[0x1000] == 0xff
  88:	000a4a83          	lbu	x21,0(x20)
# 	lhu x21, 2(x20)			# x21 = ram[0x1000 + 2] == 0xffff
  8c:	002a5a83          	lhu	x21,2(x20)
# 	addi x22, x21, 1        # x22 = 0xffff + 1 == 0x1_0000
  90:	001a8b13          	addi	x22,x21,1
# 	jal x1, lbl_jal			#
  94:	36c000ef          	jal	x1,400 <lbl_jal>
# 	beq x22, x22, lbl_beq	# x22 == x22 -> branch taken
  98:	376b0863          	beq	x22,x22,408 <lbl_beq>

0000009c <lbl1>:
# lbl1:
# 	bne x22, x21, lbl_bne	# 0x1_0000 != 0xffff -> branch taken
  9c:	375b1a63          	bne	x22,x21,410 <lbl_bne>

000000a0 <lbl2>:
# lbl2:
# 	blt x21, x22, lbl_blt   # 0xffff < 0x1_0000 -> branch taken
  a0:	376acc63          	blt	x21,x22,418 <lbl_blt>

000000a4 <lbl3>:
# lbl3:
# 	bge x22, x21, lbl_bge	# 0x1_0000 >= 0xffff -> branch taken
  a4:	375b5e63          	bge	x22,x21,420 <lbl_bge>

000000a8 <lbl4>:
# lbl4:
# 	bltu x19, x18, lbl_bltu	# 1 < 0xffff_ffff -> branch taken
  a8:	3929e063          	bltu	x19,x18,428 <lbl_bltu>

000000ac <lbl5>:
# lbl5:
# 	bgeu x18, x19, lbl_bgeu	# 0xffff_ffff > 1 -> branch taken
  ac:	39397263          	bgeu	x18,x19,430 <lbl_bgeu>

000000b0 <lbl6>:
# lbl6:
# 	beq x22, x21, lbl_beq	# 0x1_0000 != 0xffff -> branch not taken 
  b0:	355b0c63          	beq	x22,x21,408 <lbl_beq>
# 	bne x21, x21, lbl_beq	# 0xffff == 0xffff -> branch not taken 
  b4:	355a9a63          	bne	x21,x21,408 <lbl_beq>
# 	blt x22, x21, lbl_blt   # 0x1_0000 > 0xffff -> branch not taken
  b8:	375b4063          	blt	x22,x21,418 <lbl_blt>
# 	bge x21, x22, lbl_bge	# 0xffff < 0x1_0000 -> branch not taken
  bc:	376ad263          	bge	x21,x22,420 <lbl_bge>
# 	bltu x18, x19, lbl_bltu	# 0xffff_ffff > 1 -> branch not taken
  c0:	37396463          	bltu	x18,x19,428 <lbl_bltu>
# 	bgeu x19, x18, lbl_bgeu	# 1 < 0xffff_ffff -> branch not taken
  c4:	3729f663          	bgeu	x19,x18,430 <lbl_bgeu>
# 	jal x1, lbl_auipc
  c8:	370000ef          	jal	x1,438 <lbl_auipc>
# 	# test the leds
# 	ori x24, x24, -1		# x24 = 0xffff_ffff
  cc:	fffc6c13          	ori	x24,x24,-1
# 	addi x23, x0, 0b1010101
  d0:	05500b93          	addi	x23,x0,85
# #	addi x23, x0, 0b0000000
# 	sb x23, 0(x24)			#  write to memory mapped I/O ram[0xffff_ffff] = 0b111_1111
  d4:	017c0023          	sb	x23,0(x24)
# 
# 	# check that register is writting the result of the op instead of the ram
# 	lhu x21, 2(x20)			# x21 = ram[0x1000 + 2] == 0xffff
  d8:	002a5a83          	lhu	x21,2(x20)
# 	addi x21, x21, 1        # x21 = 0xffff + 1 == 0x1_0000
  dc:	001a8a93          	addi	x21,x21,1
# 
# 	sw x21, (x20)			# ram[0x1000] = 0x1_0000
  e0:	015a2023          	sw	x21,0(x20)
# 	lw x25, (x20)			# x25 = ram[0x1000] == 0x1_0000
  e4:	000a2c83          	lw	x25,0(x20)
# 	addi x26, x25, 1		# x26 = 0x1_0000 + 1 == 0x1_0001
  e8:	001c8d13          	addi	x26,x25,1
# 	addi x26, x26,-1		# x26 = 0x1_0001 - 1 == 0x1_0000
  ec:	fffd0d13          	addi	x26,x26,-1

000000f0 <lbl_done>:
# 
# lbl_done:
# 	jal x0, lbl_done
  f0:	0000006f          	jal	x0,f0 <lbl_done>
	...

00000400 <lbl_jal>:
# 
# .org 0x400
# lbl_jal:
# 	jalr x0, 0(x1)
 400:	00008067          	jalr	x0,0(x1)
 404:	0000                	.2byte	0x0
	...

00000408 <lbl_beq>:
# 
# .org 0x408
# lbl_beq:
# 	jal x0, lbl1
 408:	c95ff06f          	jal	x0,9c <lbl1>
 40c:	0000                	.2byte	0x0
	...

00000410 <lbl_bne>:
# 
# .org 0x410
# lbl_bne:
# 	jal x0, lbl2
 410:	c91ff06f          	jal	x0,a0 <lbl2>
 414:	0000                	.2byte	0x0
	...

00000418 <lbl_blt>:
# 
# .org 0x418
# lbl_blt:
# 	jal x0, lbl3
 418:	c8dff06f          	jal	x0,a4 <lbl3>
 41c:	0000                	.2byte	0x0
	...

00000420 <lbl_bge>:
# 
# .org 0x420
# lbl_bge:
# 	jal x0, lbl4
 420:	c89ff06f          	jal	x0,a8 <lbl4>
 424:	0000                	.2byte	0x0
	...

00000428 <lbl_bltu>:
# 
# .org 0x428
# lbl_bltu:
# 	jal x0, lbl5
 428:	c85ff06f          	jal	x0,ac <lbl5>
 42c:	0000                	.2byte	0x0
	...

00000430 <lbl_bgeu>:
# 
# .org 0x430
# lbl_bgeu:
# 	jal x0, lbl6
 430:	c81ff06f          	jal	x0,b0 <lbl6>
 434:	0000                	.2byte	0x0
	...

00000438 <lbl_auipc>:
# 
# .org 0x438
# lbl_auipc:
# 	auipc x2, 0xfffff	# 0x0438 + 0xffff_f0000 (-4096) == -3016 = 0xffff_f438
 438:	fffff117          	auipc	x2,0xfffff
# 	jalr x0, 0(x1)
 43c:	00008067          	jalr	x0,0(x1)
